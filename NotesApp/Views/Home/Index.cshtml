@model List<NotesApp.Models.Note>
@using NotesApp.Models

@{
    ViewData["Title"] = "Мої нотатки";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-6 fw-bold text-primary">
            <i class="bi bi-journal-text me-2"></i>@ViewData["Title"]
        </h1>
        <button class="btn btn-primary rounded-pill px-4 py-2 fw-bold" data-bs-toggle="modal" data-bs-target="#createModal">
            <i class="bi bi-plus-lg me-2"></i>Додати нотатку
        </button>
    </div>

    <!-- Notifications Container -->
    <div id="notifications-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;"></div>

    @if (Model.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="notes-container">
            @foreach (var note in Model)
            {
                <div class="col">
                    <div class="card note-card h-100 border-0 shadow-sm" id="note-card-@note.Id">
                        <div class="card-body position-relative">
                            @if (note.ReminderAt.HasValue)
                            {
                                <span class="badge bg-warning text-dark position-absolute top-0 end-0 m-2">
                                    <i class="bi bi-alarm me-1"></i>@note.ReminderAt?.ToString("g")
                                </span>
                            }
                            <h5 class="card-title fw-bold text-truncate">@note.Title</h5>
                            <p class="card-text note-content">@note.Content</p>
                            
                            <div class="text-muted small mb-3">
                                <i class="bi bi-clock me-1"></i>Створено: @note.CreatedAt.ToString("g")
                            </div>

                            <div class="mb-3">
                                <div id="noteTags-@note.Id" class="d-flex flex-wrap gap-1 mb-2">
                                    @foreach (var noteTag in note.NoteTags)
                                    {
                                        <span class="badge" style="background-color: @noteTag.Tag.Color">
                                            @noteTag.Tag.Name
                                            <button class="btn btn-sm btn-link text-white p-0 ms-1 remove-note-tag" 
                                                    data-note-id="@note.Id" data-tag-id="@noteTag.TagId">
                                                <i class="bi bi-x"></i>
                                            </button>
                                        </span>
                                    }
                                </div>
                                <button class="btn btn-sm btn-outline-secondary add-tag-btn" 
                                        data-note-id="@note.Id" data-bs-toggle="modal" data-bs-target="#tagsModal">
                                    <i class="bi bi-plus"></i> Додати теги
                                </button>
                            </div>

                            <div class="d-flex justify-content-between align-items-center">
                                <button class="btn btn-sm btn-outline-primary rounded-pill px-3 edit-note-btn"
                                        data-note-id="@note.Id">
                                    <i class="bi bi-pencil me-1"></i> Редагувати
                                </button>
                                <button class="btn btn-sm btn-outline-danger rounded-pill px-3 delete-note-btn"
                                        data-note-id="@note.Id">
                                    <i class="bi bi-trash me-1"></i> Видалити
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="empty-state">
                <i class="bi bi-journal-x display-1 text-muted"></i>
                <h3 class="mt-3">Нотаток не знайдено</h3>
                <p class="text-muted">Почніть зі створення нової нотатки</p>
                <button class="btn btn-primary rounded-pill px-4 mt-2" data-bs-toggle="modal" data-bs-target="#createModal">
                    <i class="bi bi-plus-lg me-2"></i>Створити нотатку
                </button>
            </div>
        </div>
    }
</div>

<!-- Create Note Modal -->
<div class="modal fade" id="createModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="bi bi-file-earmark-plus me-2"></i>Нова нотатка</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Notes" asp-action="Create" method="post">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Заголовок*</label>
                        <input type="text" name="Title" class="form-control rounded-3" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Вміст</label>
                        <textarea name="Content" class="form-control rounded-3" rows="5" style="resize: none;"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold"><i class="bi bi-alarm me-1"></i>Нагадування</label>
                        <input type="datetime-local" name="ReminderAt" class="form-control rounded-3" />
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Скасувати</button>
                    <button type="submit" class="btn btn-primary rounded-pill px-4">
                        <i class="bi bi-save me-1"></i> Зберегти
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Note Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="bi bi-pencil-square me-2"></i>Редагувати нотатку</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="edit-note-form" method="post">
                <div class="modal-body">
                    <input type="hidden" name="id" id="editNoteId" />
                    <div class="mb-3">
                        <label class="form-label fw-bold">Заголовок*</label>
                        <input type="text" id="editNoteTitle" name="title" class="form-control rounded-3" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Вміст</label>
                        <textarea id="editNoteContent" name="content" class="form-control rounded-3" rows="5" style="resize: none;"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold"><i class="bi bi-alarm me-1"></i>Нагадування</label>
                        <input type="datetime-local" id="editNoteReminderAt" name="reminderAt" class="form-control rounded-3" />
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">Скасувати</button>
                    <button type="submit" class="btn btn-primary rounded-pill px-4">
                        <i class="bi bi-save me-1"></i> Зберегти
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title"><i class="bi bi-exclamation-triangle me-2"></i>Підтвердження видалення</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Ви впевнені, що хочете видалити нотатку "<span id="noteToDeleteTitle"></span>"?</p>
                <p class="text-muted small">Цю дію не можна скасувати.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Скасувати</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteNote">Видалити</button>
            </div>
        </div>
    </div>
</div>

<!-- Tags Selection Modal -->
<div class="modal fade" id="tagsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="bi bi-tags me-2"></i>Оберіть теги</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h6 class="mb-0">Доступні теги</h6>
                    <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#createTagModal">
                        <i class="bi bi-plus"></i> Новий тег
                    </button>
                </div>
                <div id="tagsContainer" class="d-flex flex-wrap gap-2"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Скасувати</button>
                <button type="button" class="btn btn-primary" id="addSelectedTags">Додати вибрані теги</button>
            </div>
        </div>
    </div>
</div>

<!-- Create Tag Modal -->
<div class="modal fade" id="createTagModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="bi bi-tag me-2"></i>Створити новий тег</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="create-tag-form">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Назва тегу*</label>
                        <input type="text" id="tagName" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Колір</label>
                        <div class="d-flex flex-wrap gap-2">
                            <div class="color-option selected" data-color="#6c757d" style="background-color: #6c757d"></div>
                            <div class="color-option" data-color="#0d6efd" style="background-color: #0d6efd"></div>
                            <div class="color-option" data-color="#dc3545" style="background-color: #dc3545"></div>
                            <div class="color-option" data-color="#198754" style="background-color: #198754"></div>
                            <div class="color-option" data-color="#ffc107" style="background-color: #ffc107"></div>
                            <div class="color-option" data-color="#fd7e14" style="background-color: #fd7e14"></div>
                            <div class="color-option" data-color="#6f42c1" style="background-color: #6f42c1"></div>
                        </div>
                        <input type="hidden" id="tagColor" value="#6c757d" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Скасувати</button>
                    <button type="submit" class="btn btn-primary">Створити</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        .note-card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border-radius: 12px !important;
            overflow: hidden;
        }
        .note-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
        }
        .note-content {
            display: -webkit-box;
            -webkit-line-clamp: 4;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            min-height: 6em;
        }
        .empty-state {
            max-width: 500px;
            margin: 0 auto;
        }
        .modal-content {
            border-radius: 12px !important;
        }
        .btn {
            transition: all 0.2s ease;
        }
        .form-control, .form-select {
            padding: 0.75rem 1rem;
        }
        textarea.form-control {
            min-height: 150px;
        }
        .tag-item {
            cursor: pointer;
            transition: all 0.2s;
        }
        .tag-item.selected {
            transform: scale(1.05);
            box-shadow: 0 0 0 2px #0d6efd;
        }
        .modal-backdrop.show {
            opacity: 0.5 !important;
        }
        
        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            transition: transform 0.2s;
            border: 2px solid transparent;
        }
        .color-option:hover {
            transform: scale(1.1);
        }
        .color-option.selected {
            border-color: #000;
            transform: scale(1.1);
        }
        #tagsContainer {
            max-height: 300px;
            overflow-y: auto;
        }
        
        /* Animation for notifications */
        .notification {
            animation: slideIn 0.3s forwards;
        }
        .notification.fade-out {
            animation: fadeOut 0.5s forwards;
        }
        @@keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @@keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
        
        /* Animation for note deletion */
        .note-card.fade-out {
            animation: fadeOutScale 0.5s forwards;
        }
        @@keyframes fadeOutScale {
            0% {
                opacity: 1;
                transform: scale(1);
            }
            100% {
                opacity: 0;
                transform: scale(0.95);
                height: 0;
                padding: 0;
                margin: 0;
                overflow: hidden;
            }
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            let selectedTags = [];
            let currentNoteId = null;
            let selectedColor = "#6c757d";
            let noteToDelete = null;

            // Delete note functionality
            $(document).on('click', '.delete-note-btn', function(e) {
                e.preventDefault();
                const noteId = $(this).data('note-id');

                $.get(`/Notes/GetNoteForDelete?id=${noteId}`, function(note) {
                    noteToDelete = note.id;
                    $('#noteToDeleteTitle').text(note.title);
                    $('#confirmDeleteModal').modal('show');
                }).fail(function() {
                    alert('Не вдалося завантажити інформацію про нотатку');
                });
            });

            $('#confirmDeleteNote').click(function() {
                if (!noteToDelete) return;

                const $noteCard = $(`#note-card-${noteToDelete}`);
                $noteCard.addClass('fade-out');

                $.post('/Notes/Delete', {
                    id: noteToDelete,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                })
                .done(function() {
                    setTimeout(() => {
                        $noteCard.closest('.col').remove();

                        if ($('#notes-container .col').length === 0) {
                            location.reload();
                        }
                    }, 500);
                })
                .fail(function() {
                    alert('Не вдалося видалити нотатку');
                })
                .always(function() {
                    $('#confirmDeleteModal').modal('hide');
                });
            });

            // Load tags for selection
            function loadTags() {
                $.get('/Tag/GetAll', function(tags) {
                    $('#tagsContainer').empty();
                    tags.forEach(function(tag) {
                        const isSelected = selectedTags.includes(tag.id);
                        $('#tagsContainer').append(`
                            <div class="tag-item badge p-2 mb-2 ${isSelected ? 'selected' : ''}"
                                 style="background-color: ${tag.color}"
                                 data-tag-id="${tag.id}">
                                ${tag.name}
                                ${isSelected ? '<i class="bi bi-check ms-1"></i>' : ''}
                            </div>
                        `);
                    });
                });
            }

            // Handle tag selection
            $(document).on('click', '.tag-item', function() {
                const tagId = $(this).data('tag-id');
                const index = selectedTags.indexOf(tagId);

                if (index === -1) {
                    selectedTags.push(tagId);
                    $(this).addClass('selected');
                    $(this).append('<i class="bi bi-check ms-1"></i>');
                } else {
                    selectedTags.splice(index, 1);
                    $(this).removeClass('selected');
                    $(this).find('i').remove();
                }
            });

            // Add selected tags to note
            $('#addSelectedTags').click(function () {
                if (!currentNoteId || selectedTags.length === 0) return;

                const requests = selectedTags.map(tagId => {
                    return $.ajax({
                        url: '/Notes/AddTagToNote',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            noteId: currentNoteId,
                            tagId: tagId
                        })
                    });
                });

                Promise.all(requests)
                    .then(() => {
                        loadNoteTags(currentNoteId);
                        closeTagsModalProperly();
                    })
                    .catch(error => {
                        console.error('Помилка додавання тегів:', error);
                        alert('Не вдалося додати один або кілька тегів');
                    });
             });


            // Close tags modal properly
            function closeTagsModalProperly() {
                selectedTags = [];
                currentNoteId = null;
                const modal = bootstrap.Modal.getInstance(document.getElementById('tagsModal'));
                modal.hide();
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();
            }

            // Load tags for a specific note
            function loadNoteTags(noteId) {
                $.get(`/Notes/GetNoteTags?noteId=${noteId}`, function(tags) {
                    $(`#noteTags-${noteId}`).empty();
                    tags.forEach(function(tag) {
                        $(`#noteTags-${noteId}`).append(`
                            <span class="badge me-1 mb-1" style="background-color: ${tag.color}">
                                ${tag.name}
                                <button class="btn btn-sm btn-link text-white p-0 ms-1 remove-note-tag"
                                        data-note-id="${noteId}" data-tag-id="${tag.id}">
                                    <i class="bi bi-x"></i>
                                </button>
                            </span>
                        `);
                    });
                });
            }

            // Color selection for new tags
            $(document).on('click', '.color-option', function() {
                $('.color-option').removeClass('selected');
                $(this).addClass('selected');
                selectedColor = $(this).data('color');
                $('#tagColor').val(selectedColor);
            });

            // Create new tag
            $('#create-tag-form').on('submit', function (e) {
                e.preventDefault();
                const tagName = $('#tagName').val().trim();
                const selectedColor = $('#tagColor').val();

                if (!tagName) {
                    alert('Будь ласка, введіть назву тегу');
                    return;
                }

                $.ajax({
                    url: '/Tag/Create',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        name: tagName,
                        color: selectedColor
                    }),
                    success: function (tag) {
                        $('#createTagModal').modal('hide');
                        $('#tagName').val('');
                        loadTags(); // оновлення списку
                    },
                    error: function (xhr) {
                        console.error('Error adding tag:', xhr);
                        alert('Не вдалося створити тег');
                    }
                });
            });


            // Remove tag from note
            $(document).on('click', '.remove-note-tag', function(e) {
                e.preventDefault();
                const noteId = $(this).data('note-id');
                const tagId = $(this).data('tag-id');

                $.post('/Notes/RemoveTagFromNote', {
                    noteId: noteId,
                    tagId: tagId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                }, function() {
                    loadNoteTags(noteId);
                });
            });

            // Open tag modal
            $(document).on('click', '.add-tag-btn', function() {
                currentNoteId = $(this).data('note-id');
                loadTags();
            });

            // Initialize tags for existing notes
        @foreach (var note in Model)
        {
            <text>loadNoteTags(@note.Id);</text>
        }

            // Handle modal cleanup
            $('#tagsModal').on('hidden.bs.modal', function () {
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();
            });

            // Edit note functionality
            $(document).on('click', '.edit-note-btn', function() {
                const noteId = $(this).data('note-id');
                $.get(`/Notes/GetNoteForEdit?id=${noteId}`, function(note) {
                    $('#editNoteId').val(note.id);
                    $('#editNoteTitle').val(note.title);
                    $('#editNoteContent').val(note.content);
                    $('#editNoteReminderAt').val(note.reminderAt);
                    $('#editModal').modal('show');
                }).fail(function() {
                    alert('Не вдалося завантажити нотатку для редагування');
                });
            });

            // Handle edit form submission
            $('#edit-note-form').on('submit', function(e) {
                e.preventDefault();

                const formData = {
                    id: $('#editNoteId').val(),
                    title: $('#editNoteTitle').val(),
                    content: $('#editNoteContent').val(),
                    reminderAt: $('#editNoteReminderAt').val(),
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                };

                $.post('/Notes/Edit', formData, function(response) {
                    $('#editModal').modal('hide');
                    location.reload();
                }).fail(function() {
                    alert('Не вдалося оновити нотатку');
                });
            });

            // Check for reminders
            function checkReminders() {
                var now = new Date();

        @foreach (var note in Model.Where(n => n.ReminderAt.HasValue))
        {
            <text>
                        var reminderTime = new Date('@note.ReminderAt?.ToString("o")');

                        if (now >= reminderTime) {
                            showNotification(@note.Id, '@Html.Raw(note.Title.Replace("'", "\\'"))', '@Html.Raw(note.Content.Replace("'", "\\'"))');

                            $.post('/Notes/ClearReminder', {
                                id: @note.Id,
                                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                            }).then(function() {
                                $(`#note-card-${@note.Id}`).remove();
                            });
                        }
            </text>
        }
            }

            // Show notification
            function showNotification(noteId, title, content) {
                const notificationId = 'notification-' + Date.now();
                const notification = $(`
                    <div id="${notificationId}" class="notification alert alert-warning alert-dismissible fade show">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-bell-fill me-2"></i>
                            <h6 class="mb-0">Нагадування</h6>
                        </div>
                        <hr class="my-2">
                        <strong>${title}</strong>
                        <p class="mb-0">${content}</p>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `);

                $('#notifications-container').append(notification);

                setTimeout(() => {
                    $(`#${notificationId}`).addClass('fade-out');
                    setTimeout(() => $(`#${notificationId}`).remove(), 500);
                }, 10000);

                notification.find('.btn-close').click(function() {
                    $(`#${notificationId}`).remove();
                });
            }

            // Check reminders every minute
            setInterval(checkReminders, 60000);
            checkReminders();
        });
    </script>
}